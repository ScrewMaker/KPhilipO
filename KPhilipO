loadstring(game:HttpGet("https://raw.githubusercontent.com/ScrewMaker/YenoAim/refs/heads/main/AIMYeno"))()

if (not _G.Flags) then
    _G.Flags = {
        HitboxExpander = {
            Size = 10;
            Enabled = true;
            Transparency = .7; -- 1 = invisible, 0 = fully visible (0 not recommended)
            Part = "Torso"; -- Changed to "Torso"
        };
    };
end

local hitboxOverrider = true -- Enable hitbox overrider

if (not _G.Loaded) then
    _G.Loaded = true;
    local ReplicatedStorage = game:GetService("ReplicatedStorage");
    local RunService = game:GetService("RunService");
    local CoreGui = game:GetService("CoreGui");
    local CurrentCamera = workspace.CurrentCamera;
    local IgnoreFolder = workspace:WaitForChild("Ignore");
    local OriginalSizes = {};
    local WeaponInfo = {};

    -- Save original sizes of parts
    for i, v in pairs(ReplicatedStorage.Shared.entities.Player.Model:GetChildren()) do
        if v:IsA("BasePart") then
            OriginalSizes[v.Name] = v.Size;
        end
    end

    -- Function to apply the hitbox expansion or revert to original size
    function HitboxExpander(Model, Size, Hitbox)
        if (Hitbox.Enabled) then
            local Part = Model:FindFirstChild(Hitbox.Part);
            if Part then
                Part.Size = Vector3.new(Size, Size, Size);
                Part.Transparency = Hitbox.Transparency;
                Part.CanCollide = false;
            end
        else
            local Part = Model:FindFirstChild(Hitbox.Part);
            if Part then
                Part.Size = OriginalSizes[Hitbox.Part];
                Part.Transparency = 0;
                Part.CanCollide = true;
            end
        end
    end

    -- Continuously apply the hitbox expansion in the game loop
    RunService.Heartbeat:Connect(function()
        local Hitbox = _G.Flags.HitboxExpander;
        for i, v in pairs(workspace:GetChildren()) do
            if v:IsA("Model") and v:FindFirstChild("Torso") and v.PrimaryPart ~= nil then
                local PrimaryPosition = v.PrimaryPart.Position;
                local Origin = CurrentCamera.CFrame.Position;
                local Distance = (Origin - PrimaryPosition).Magnitude;

                -- Apply hitbox expansion based on settings
                HitboxExpander(v, Hitbox.Size, Hitbox);
            end
        end
    end)

    -- Add the hitbox overrider functionality here
    local mt = getrawmetatable(game)
    setreadonly(mt, false)

    local oldIndex = mt.__namecall
    mt.__namecall = function(...)
        local method = getnamecallmethod()
        local args = {...}

        -- Only modify the FireServer call
        if method == "FireServer" then
            local eventId, eventType, hitPart = args[2], args[3], args[7]

            -- Check if the event is a hit event and we are targeting the "Torso" or "Head"
            if eventId == 10 and eventType == "Hit" then
                if hitPart == "Torso" and hitboxOverrider then
                    -- Override the "Torso" hit with "Head"
                    args[7] = "Head"
                end
            end
        end

        return oldIndex(table.unpack(args))
    end

    setreadonly(mt, true)

    -- Additional check on a separate metatable for the same purpose (if needed)
    local meta = getrawmetatable(game)
    setreadonly(meta, false)

    local oldMetaIndex = meta.__namecall
    meta.__namecall = function(...)
        local method = getnamecallmethod()
        local args = {...}
        if args[2] == 10 and args[3] == "Hit" and args[7] == "Torso" and hitboxOverrider then
            args[7] = "Head" -- Override Torso hit with Head if hitboxOverrider is enabled
        end
        return oldMetaIndex(table.unpack(args))
    end

    setreadonly(meta, true)
end

local trident = { -- swimhub moment start
    loaded = false,
    gc = {
        isgrounded = nil,
        character = nil,
        camera = nil
    },
}

LPH_JIT_MAX(function()
    for i, v in pairs(getgc(true)) do
        if type(v) == "table" then
            if type(rawget(v, "updateCharacter")) == "function" then
                trident.gc.character = v
            end

            if type(rawget(v, "SetMaxRelativeLookExtentsY")) == "function" then
                trident.gc.camera = v
            end
        end
    end
end)()

local noatvrestriction = true

task.spawn(function()
    local thing = trident.gc.camera.SetMaxRelativeLookExtentsY
    while wait() do
        if noatvrestriction then
            thing(10000)
        end
    end
end)

local modules = {
    ["PlayerClient"] = {},
    ["Character"] = {},
    ["Camera"] = {},
    ["RangedWeaponClient"] = {},
    ["GetEquippedItem"] = {},
    ["FPS"] = {},
}

for _, v in pairs(getgc(true)) do
    if typeof(v) == "function" and islclosure(v) then
        local info = debug.getinfo(v)
        local name = string.match(info.short_src, "%.([%w_]+)$")
        if name and modules[name] and info.name then
            modules[name][info.name] = info.func
        end
    end
end

local lamae = debug.getupvalues(modules.Character.updateCharacter)
local RunService, Camera = game:GetService("RunService"), workspace.CurrentCamera
local players = game:GetService("Players")
local localPlayer = players.LocalPlayer
local Color3_fromRGB, Drawing_new, pairs, Vector2_new = Color3.fromRGB, Drawing.new, pairs, Vector2.new

local settings = {
    killAura = {
        enabled = true,
        distance = 10,
        validWeapons = {
            ["Hammer"] = true,
            ["Crowbar"] = true,
            ["StoneHammer"] = true,
            ["SteelHammer"] = true,
            ["MiningDrill"] = true,
            ["IronHammer"] = true
        },
        hitPart = "Head"
    },
    silentFarm = {
        enabled = true,
        speed = 2,
        distance = 10,
        entities = {"Cactus", "Tree", "Nitrate", "Stone", "Iron"}
    },
    corpseESP = {
        enabled = false,
        textColor = Color3_fromRGB(255, 0, 0),
        outlineColor = Color3_fromRGB(0, 0, 0),
        unionColor = Color3_fromRGB(205, 205, 205)
    },
    atvESP = {
        enabled = true,
        textColor = Color3_fromRGB(0, 255, 0),
        outlineColor = Color3_fromRGB(0, 0, 0)
    }
}

local function GetLocalToolName()
    if not CharacterList or not CharacterList[2] or not CharacterList[2].GetEquippedItem then
        return "nothing you pooron"
    end
    local equippedItem = CharacterList[2].GetEquippedItem()
    return equippedItem and equippedItem.type or "nothing you pooron"
end

local function GetClosestPlayer()
    local closest, playerTable, closestMagnitude = nil, nil, math.huge
    local localCharPos = workspace.Ignore.LocalCharacter.Middle.Position

    for _, v in pairs(PlayerList or {}) do
        if v.type == "Player" and v.model then
            local humanoidRootPart = v.model:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart and not v.sleeping then
                local partPos, onScreen = Camera:WorldToViewportPoint(humanoidRootPart.Position)
                local playerDistance = (localCharPos - humanoidRootPart.Position).Magnitude
                if playerDistance <= settings.killAura.distance and onScreen then
                    local magnitude = (Vector2.new(partPos.X, partPos.Y) - Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)).Magnitude
                    if magnitude < closestMagnitude then
                        closestMagnitude = magnitude
                        closest = v.model
                        playerTable = v
                    end
                end
            end
        end
    end
    return closest, playerTable
end

task.spawn(function()
    while task.wait(0.01) do
        if settings.killAura.enabled then
            local player, fr = GetClosestPlayer()
            local Weapon = GetLocalToolName()
            if player and fr and settings.killAura.validWeapons[Weapon] then
                localPlayer.TCP:FireServer(10, "Swing")
                localPlayer.TCP:FireServer(10, "Hit", fr.id, player.HumanoidRootPart.Position, settings.killAura.hitPart, Vector3.new(0, 0, 0))
                task.wait(Weapon == "MiningDrill" and 0.01 or 0.95)
            else
                task.wait(0.1)
            end
        end
    end
end)

task.spawn(function()
    while task.wait(0.01) do
        if settings.silentFarm.enabled then
            local playerPosition = workspace.Ignore.LocalCharacter.Middle and workspace.Ignore.LocalCharacter.Middle.Position
            if not playerPosition then continue end

            for id, entity in pairs(lamae[14].EntityMap or {}) do
                if type(entity) == "table" and type(entity.type) == "string" then
                    for _, entityType in ipairs(settings.silentFarm.entities) do
                        if string.match(entity.type, entityType) then
                            local entityPosition = entity.pos
                            if not entityPosition then continue end

                            local distanceToEntity = (playerPosition - entityPosition).Magnitude
                            if distanceToEntity <= settings.silentFarm.distance then
                                local Weapon = GetLocalToolName()
                                local waitTime = Weapon == "MiningDrill" and 0.01 or settings.silentFarm.speed

                                localPlayer.TCP:FireServer(10, "Swing")
                                local hitType = (entity.type == "Tree") and "default" or "Part"
                                local hitPosition = Vector3.new(0, 0, 0)
                                localPlayer.TCP:FireServer(10, "Hit", id, entityPosition, hitType, hitPosition)

                                task.wait(waitTime)
                                break
                            end
                        end
                    end
                end
            end
        else
            task.wait(0.5)
        end
    end
end)

local CorpseCaches, ATVCache = {}, {}

workspace.ChildAdded:Connect(function(child)
    if settings.corpseESP.enabled then
        local unionOp = child:FindFirstChildOfClass("UnionOperation")
        if unionOp and unionOp.Color == settings.corpseESP.unionColor then
            local corpseCache = Drawing.new("Text")
            corpseCache.Size = 10
            corpseCache.Color = settings.corpseESP.textColor
            corpseCache.Outline = true
            corpseCache.OutlineColor = settings.corpseESP.outlineColor
            CorpseCaches[child] = corpseCache
        end
    end
end)

workspace.ChildRemoved:Connect(function(child)
    local corpseCache = CorpseCaches[child]
    if corpseCache then
        corpseCache:Remove()
        CorpseCaches[child] = nil
    end
end)

workspace.ChildAdded:Connect(function(child)
    if settings.atvESP.enabled then
        local seat = child:FindFirstChild("Seat")
        local plastics = child:FindFirstChild("Plastics")
        if seat and plastics then
            local atvHighlight = Drawing.new("Text")
            atvHighlight.Size = 10
            atvHighlight.Color = settings.atvESP.textColor
            atvHighlight.Outline = true
            atvHighlight.OutlineColor = settings.atvESP.outlineColor
            ATVCache[child] = atvHighlight
        end
    end
end)

workspace.ChildRemoved:Connect(function(child)
    local atvHighlight = ATVCache[child]
    if atvHighlight then
        atvHighlight:Remove()
        ATVCache[child] = nil
    end
end)

RunService.Heartbeat:Connect(function()
    if settings.corpseESP.enabled then
        for corpse, corpseCache in pairs(CorpseCaches) do
            local primaryPart = corpse.PrimaryPart
            if primaryPart then
                local screenPos, onScreen = Camera:WorldToViewportPoint(primaryPart.Position)
                local distance = (Camera.CFrame.Position - primaryPart.Position).Magnitude
                corpseCache.Visible = onScreen
                if corpseCache.Visible then
                    corpseCache.Text = "Corpse [" .. math.floor(distance) .. "]"
                    corpseCache.Position = Vector2.new(screenPos.X, screenPos.Y)
                end
            end
        end
    end

    if settings.atvESP.enabled then
        for atv, atvHighlight in pairs(ATVCache) do
            local primaryPart = atv.PrimaryPart
            if primaryPart then
                local screenPos, onScreen = Camera:WorldToViewportPoint(primaryPart.Position)
                local distance = (Camera.CFrame.Position - primaryPart.Position).Magnitude
                atvHighlight.Visible = onScreen
                if atvHighlight.Visible then
                    atvHighlight.Text = "ATV [" .. math.floor(distance) .. "]"
                    atvHighlight.Position = Vector2.new(screenPos.X, screenPos.Y)
                end
            end
        end
    end
end)
